
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer



from pathlib import Path
import wave
import pygame
from deep_translator import GoogleTranslator
# Import the Gtts module for text
# to speech conversion
import customtkinter
from gtts import gTTS
import speech_recognition as sr
# import Os module to start the audio file
import os
import pyaudio
import sounddevice as sd
import soundfile as sf
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import customtkinter

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/home/oni/PycharmProjects/solveur_python/TP_parole/build/assets/frame0")


is_first_image=0
rf= None
var_text=""
def change_image():
    global is_first_image
    if ( is_first_image == 0 ) :
        button_4.config(image=button_image_5)
        is_first_image = 1
    else:
        button_4.config(image=button_image_4)
        is_first_image = 0
    # Met à jour l'affichage
    button_3.update()


class RecordingFile:
    def __init__(self, filename="enregistrement.wav", mode='wb', CHANNELS=1, RATE=44100, CHUNK=1024):
        self.filename = filename
        self.mode = mode
        self.CHANNELS = CHANNELS
        self.RATE = RATE
        self.CHUNK = CHUNK
        self.audio = pyaudio.PyAudio()
        self.wavefile = self.prepare_file(self.filename)
        self._stream = None
        self.recording = False

    def start_recording(self):
        self._stream = self.audio.open(format=pyaudio.paInt16,
                                       channels=self.CHANNELS, rate=self.RATE,
                                       input=True, frames_per_buffer=self.CHUNK,
                                       stream_callback=self.write_callback)
        self._stream.start_stream()
        self.recording = True

    def stop_recording(self):
        self.recording = False
        if self._stream:
            self._stream.stop_stream()
            self.close()

    def write_callback(self, in_data, frame_count, time_info, status):
        self.wavefile.writeframes(in_data)
        if self.recording:
            flag = pyaudio.paContinue
        else:
            flag = pyaudio.paComplete
        return None, flag

    def close(self):
        if self._stream:
            self._stream.close()
            self._stream = None
            self.audio.terminate()
            self.wavefile.close()

    def prepare_file(self, filename, mode='wb'):
        wavefile = wave.open(filename, mode)
        wavefile.setnchannels(self.CHANNELS)
        wavefile.setsampwidth(self.audio.get_sample_size(pyaudio.paInt16))
        wavefile.setframerate(self.RATE)
        return wavefile

def start_recording():
    global rf
    rf = RecordingFile()
    rf.start_recording()
    button_3.configure(command=stop_recording)
    entry_3.delete(0,"end")
    entry_3.insert(0,"Début de l'enregistrement....")
    print("Début de l'enregistrement")

def stop_recording():
    global rf
    rf.stop_recording()
    rf = None
    button_3.configure(command=start_recording)
    entry_3.delete(0, "end")
    entry_3.insert(0, "Enregistrement FIN")
    traduction()
    print(" Arrêt de l'enregistrement")

def lire_audio(nom_fichier="output.mp3"):
    entry_3.delete(0, "end")
    entry_3.insert(0, "Lecture Audio...")
    pygame.init()
    pygame.mixer.init()
    pygame.mixer.music.load(nom_fichier)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)
    pygame.mixer.quit()
    pygame.quit()

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def speech_to_text():
    recognizer = sr.Recognizer()
    nom_fichier = "enregistrement.wav"
    with sr.AudioFile(nom_fichier) as audio_file:
        try:
            recognizer.adjust_for_ambient_noise(audio_file)
            audio_data = recognizer.record(audio_file)
            if (is_first_image == 0):
                text = recognizer.recognize_google(audio_data, language='fr-FR')
            else:
                text = recognizer.recognize_google(audio_data, language='en-EN')
            return text
        except sr.UnknownValueError:
            text = "1"
            return text
        except sr.RequestError as e:
            text = "2"
            return text

def translate_language(text ,target_language='en'):
    global  var_text
    if ( is_first_image == 0) :
        target_language = 'en'
    elif ( is_first_image == 1) :
        target_language = 'fr'
    text_to_trans = text
    lang = target_language
    output = GoogleTranslator(source="auto", target=lang).translate(text_to_trans)
    var_text = output
    return  output

def affich_trans():
    entry_2.delete(0.0,"end")
    entry_2.insert(0.0,var_text)


def text_to_speech(text, language='en'):
    if ( is_first_image == 0):
        language = 'en'
    else:
        language = 'fr'
    tts = gTTS(text, lang=language)
    tts.save("output.mp3")

def traduction():
    global var_text
    entry_1.delete(0.0, "end")
    entry_2.delete(0.0, "end")
    text = speech_to_text()
    if(text == "1"):
        entry_1.insert(0.0, "Audio illisible ou corrompu")
    elif(text == "2") :
        entry_1.insert(0.0, "Problème de connexion")
    else :
        entry_1.insert(0.0, text)
        text_to_speech(translate_language(text))
    return



window = Tk()
window.title("TP_1")
window.geometry("700x450")
window.configure(bg = "#2F353F")


canvas = Canvas(
    window,
    bg = "#2F353F",
    height = 450,
    width = 700,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    187.5,
    179.5,
    image=entry_image_1
)
entry_1 = customtkinter.CTkTextbox(window,
    bg_color="#383840",
    fg_color="#383840",
    width=313.0,
    height=183.0,
    text_color="#fff",
    border_width=0,
    wrap="word"
)

entry_1.place(
    x=31.0,
    y=87.0
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    509.0,
    179.5,
    image=entry_image_2
)

entry_2 = customtkinter.CTkTextbox(window,
    bg_color="#383840",
    fg_color="#383840",
                                   width=330.0,
                                   height=183.0,
    text_color="#fff",wrap="word",
                                 border_width=0
)
entry_2.place(
    x=344.0,
    y=87.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    activebackground="#383840",
    bg="#383840",
    highlightthickness=0,
    command=affich_trans,
    relief="flat"
)
button_1.place(
    x=304.0,
    y=165.0,
    width=79.97183227539062,
    height=27.692306518554688
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    activebackground="#2F353F",
    bg="#2F353F",
    highlightthickness=0,
    command=lire_audio,
    relief="flat"
)

button_2.place(
    x=530.0,
    y=308.0,
    width=121.0,
    height=111.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    activebackground="#2F353F",
    bg="#2F353F",
    highlightthickness=0,
    command=start_recording,
    relief="flat"
)

button_3.place(
    x=49.0,
    y=307.0,
    width=121.0,
    height=111.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    activebackground="#2F353F",
    bg="#2F353F",
    highlightthickness=0,
    command=change_image,
    relief="flat"
)

button_4.place(
    x=255.0,
    y=350.0,
    width=179.0,
    height=30.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))


image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    350.0,
    21.0,
    image=image_image_1
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    350.0,
    52.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000000",
    highlightthickness=0
)
entry_3.place(
    x=0.0,
    y=42.0,
    width=700.0,
    height=18.0
)
window.resizable(False, False)
window.mainloop()
